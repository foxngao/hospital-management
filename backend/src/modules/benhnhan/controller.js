const { v4: uuidv4 } = require('uuid');
const { BenhNhan, TaiKhoan } = require('../../models'); // ƒê√öNG
const { Op } = require('sequelize');


//  Th√™m b·ªánh nh√¢n
exports.create = async (req, res) => {
  const data = req.body;
  console.log("üì¶ D·ªØ li·ªáu t·∫°o b·ªánh nh√¢n:", data);

  try {
    const existsPhone = await BenhNhan.findOne({ where: { soDienThoai: data.soDienThoai } });
    if (existsPhone)
      return res.status(400).json({ success: false, message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });

    const existsBenhNhan = await BenhNhan.findOne({ where: { maTK: data.maTK } });
    if (existsBenhNhan)
      return res.status(400).json({ success: false, message: "T√†i kho·∫£n ƒë√£ c√≥ h·ªì s∆°" });

    const maBN = 'BN' + uuidv4().slice(0, 6).toUpperCase();

    data.ngaySinh = new Date(data.ngaySinh);
    if (isNaN(data.ngaySinh.getTime()))
      return res.status(400).json({ success: false, message: "Ng√†y sinh kh√¥ng h·ª£p l·ªá" });

    const newBN = await BenhNhan.create({
      maBN,
      hoTen: data.hoTen,
      ngaySinh: data.ngaySinh,
      gioiTinh: data.gioiTinh,
      soDienThoai: data.soDienThoai,
      email: data.email,
      diaChi: data.diaChi,
      bhyt: data.bhyt || null,
      maTK: data.maTK
    });

    console.log("‚úÖ T·∫°o b·ªánh nh√¢n OK:", newBN?.maBN);

    res.status(201).json({ success: true, message: "Th√™m b·ªánh nh√¢n th√†nh c√¥ng", data: newBN });
  } catch (err) {
    console.error("‚ùå L·ªói t·∫°o b·ªánh nh√¢n:", err);
    res.status(500).json({ success: false, message: "L·ªói t·∫°o b·ªánh nh√¢n" });
  }
};



exports.getOne = async (req, res) => {
  const { id } = req.params;

  try {
    const benhNhan = await BenhNhan.findOne({ where: { maTK: id } });

    if (!benhNhan) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y b·ªánh nh√¢n",
        data: null,
      });
    }

    return res.json({
      success: true,
      message: "L·∫•y th√¥ng tin b·ªánh nh√¢n th√†nh c√¥ng",
      data: benhNhan,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y b·ªánh nh√¢n:", err);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi l·∫•y th√¥ng tin b·ªánh nh√¢n",
      error: err.message,
    });
  }
};


exports.getAll = async (req, res) => {
  try {
    const ds = await BenhNhan.findAll({
      include: [{ model: TaiKhoan, attributes: ["tenDangNhap", "email", "trangThai"] }]
    });
    res.json({ message: "L·∫•y danh s√°ch b·ªánh nh√¢n", data: ds });
  } catch (err) {
    res.status(500).json({ message: "L·ªói l·∫•y danh s√°ch", error: err.message });
  }
};

exports.update = async (req, res) => {
  const ma = req.params.id;
  const data = req.body;

  const exists = await BenhNhan.findByPk(ma);
  if (!exists) return res.status(404).json({ success: false, message: "B·ªánh nh√¢n kh√¥ng t·ªìn t·∫°i" });

// trong controller.js > exports.update
  if (data.ngaySinh) {
    data.ngaySinh = new Date(data.ngaySinh);
    if (isNaN(data.ngaySinh.getTime())) {
      return res.status(400).json({ success: false, message: "Ng√†y sinh kh√¥ng h·ª£p l·ªá" });
    }
  }


  // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i m·ªõi c√≥ tr√πng v·ªõi ng∆∞·ªùi kh√°c kh√¥ng
  if (data.soDienThoai !== exists.soDienThoai) {
    const conflict = await BenhNhan.findOne({ where: { soDienThoai: data.soDienThoai } });
    if (conflict) return res.status(400).json({ success: false, message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c d√πng" });
  }

  await BenhNhan.update(data, { where: { maBN: ma } });
  res.json({ success: true, message: "C·∫≠p nh·∫≠t th√†nh c√¥ng" });
};

exports.remove = async (req, res) => {
  try {
    const deleted = await BenhNhan.destroy({ where: { maBN: req.params.id } });
    if (deleted === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b·ªánh nh√¢n ƒë·ªÉ xo√°" });
    res.json({ message: "Xo√° th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói xo√° b·ªánh nh√¢n", error: err.message });
  }
};

exports.findByMaTK = async (req, res) => {
  try {
    const info = await BenhNhan.findOne({
      where: { maTK: req.params.maTK },
      include: [{ model: TaiKhoan, attributes: ["tenDangNhap", "email", "trangThai"] }]
    });
    if (!info) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y" });
    res.json({ success: true, data: info });
  } catch (err) {
    res.status(500).json({ message: "L·ªói t√¨m b·ªánh nh√¢n", error: err.message });
  }
};
