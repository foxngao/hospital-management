// CONTROLLER: X·ª≠ l√Ω l·ªãch l√†m vi·ªác c·ªßa b√°c sƒ© (B·∫£ng: LichLamViec)
const { v4: uuidv4 } = require("uuid");
const { LichLamViec } = require("./model");

// ‚úÖ L·∫•y to√†n b·ªô l·ªãch l√†m vi·ªác (ADMIN)
exports.getAll = async (req, res) => {
  try {
    const data = await LichLamViec.findAll({ order: [["ngayLamViec", "DESC"]] });
    res.json({ message: "L·∫•y to√†n b·ªô l·ªãch l√†m vi·ªác", data });
  } catch (err) {
    console.error("‚ùå L·ªói Sequelize:", err);
    res.status(500).json({ message: "L·ªói l·∫•y l·ªãch l√†m vi·ªác", error: err.message });
  }
};

// ‚úÖ L·∫•y l·ªãch l√†m vi·ªác theo m√£ nh√¢n s·ª± (c≈© - v·∫´n gi·ªØ n·∫øu frontend kh√°c d√πng)
exports.getByNhanSu = async (req, res) => {
  try {
    const { maNS } = req.params;
    const data = await LichLamViec.findAll({
      where: { maNS },
      order: [["ngayLamViec", "DESC"]],
    });
    res.json({ message: "L·∫•y l·ªãch l√†m vi·ªác theo nh√¢n s·ª±", data });
  } catch (err) {
    console.error("‚ùå L·ªói Sequelize:", err);
    res.status(500).json({ message: "L·ªói l·∫•y l·ªãch nh√¢n s·ª±", error: err.message });
  }
};

// ‚úÖ L·∫•y l·ªãch l√†m vi·ªác theo m√£ b√°c sƒ© (maBS) ‚Äì d√πng cho frontend hi·ªán t·∫°i
exports.getByBacSi = async (req, res) => {
  try {
    const { maBS } = req.params;
    const data = await LichLamViec.findAll({
      where: { maBS },
      order: [["ngayLamViec", "DESC"]],
    });
    res.json({ message: "L·∫•y l·ªãch l√†m vi·ªác theo b√°c sƒ©", data });
  } catch (err) {
    console.error("‚ùå L·ªói Sequelize:", err);
    res.status(500).json({ message: "L·ªói l·∫•y l·ªãch b√°c sƒ©", error: err.message });
  }
};

// ‚úÖ T·∫°o m·ªõi l·ªãch l√†m vi·ªác
exports.create = async (req, res) => {
  try {
    const { maNS, maCa, ngayLamViec, maBS } = req.body;
    const maLichLV = uuidv4().slice(0, 8).toUpperCase();

    console.log("üì• D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", req.body);

    const newData = await LichLamViec.create({
      maLichLV,
      maCa,
      ngayLamViec,
      maNS,
      maBS, // B·∫ÆT BU·ªòC ph·∫£i c√≥
    });

    res.status(201).json({ message: "T·∫°o l·ªãch l√†m vi·ªác th√†nh c√¥ng", data: newData });
  } catch (err) {
    console.error("‚ùå L·ªói Sequelize:", err);
    res.status(500).json({ message: "L·ªói t·∫°o l·ªãch l√†m vi·ªác", error: err.message });
  }
};

// ‚úÖ C·∫≠p nh·∫≠t l·ªãch l√†m vi·ªác
exports.update = async (req, res) => {
  try {
    const { id } = req.params;
    const { maCa, ngayLamViec } = req.body;

    const [updated] = await LichLamViec.update({ maCa, ngayLamViec }, { where: { maLichLV: id } });

    if (!updated) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y l·ªãch ƒë·ªÉ c·∫≠p nh·∫≠t" });

    res.json({ message: "C·∫≠p nh·∫≠t l·ªãch l√†m vi·ªác th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói Sequelize:", err);
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t l·ªãch l√†m vi·ªác", error: err.message });
  }
};

// ‚úÖ Xo√° l·ªãch l√†m vi·ªác
exports.remove = async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await LichLamViec.destroy({ where: { maLichLV: id } });

    if (!deleted) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y l·ªãch ƒë·ªÉ xo√°" });

    res.json({ message: "Xo√° l·ªãch l√†m vi·ªác th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói Sequelize:", err);
    res.status(500).json({ message: "L·ªói xo√° l·ªãch l√†m vi·ªác", error: err.message });
  }
};
